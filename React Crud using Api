import React, { useState, useEffect } from 'react';
import axios from 'axios';
const BASE_URL = "http://localhost:3000"; 

const UserList = () => {
  const [users, setUsers] = useState([]);
  const [newUser, setNewUser] = useState({ username: '', password: '' });
  const [editUser, setEditUser] = useState({ userId: '', username: '', password: '' });
  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    axios.get(`${BASE_URL}/list`) 
      .then(response => {
        setUsers(response.data);
      })
      .catch(error => {
        console.error('Error fetching users:', error);
      });
  }, []);

  const handleAddUser = async () => {
    try {
      await axios.post(`${BASE_URL}/add`, newUser); 
      setNewUser({ username: '', password: '' });

      const response = await axios.get(`${BASE_URL}/list`);
      setUsers(response.data);
    } catch (error) {
      console.error('Error adding user:', error);
    }
  };

  const handleEditUser = async () => {
    try {
      await axios.put(`${BASE_URL}/edit/${editUser.userId}`, editUser);
      setIsEditing(false);
      setEditUser({ userId: '', username: '', password: '' });

      const response = await axios.get(`${BASE_URL}/list`);
      setUsers(response.data);
    } catch (error) {
      console.error('Error updating user:', error);
    }
  };

  const handleDeleteUser = async (userId) => {
    try {
      await axios.delete(`${BASE_URL}/delete-user/${userId}`);

      const response = await axios.get(`${BASE_URL}/list`);
      setUsers(response.data);
    } catch (error) {
      console.error('Error deleting user:', error);
    }
  };

  return (
    <div>
      <h2>User Management</h2>

      {}
      <h3>Add New User</h3>
      <input 
        type="text" 
        value={newUser.username} 
        onChange={(e) => setNewUser({ ...newUser, username: e.target.value })} 
        placeholder="Username" 
      />
      <input 
        type="password" 
        value={newUser.password} 
        onChange={(e) => setNewUser({ ...newUser, password: e.target.value })} 
        placeholder="Password" 
      />
      <button onClick={handleAddUser}>Add User</button>

      {}
      {isEditing && (
        <div>
          <h3>Edit User</h3>
          <input 
            type="text" 
            value={editUser.username} 
            onChange={(e) => setEditUser({ ...editUser, username: e.target.value })} 
            placeholder="Username" 
          />
          <input 
            type="text" 
            value={editUser.password} 
            onChange={(e) => setEditUser({ ...editUser, password: e.target.value })} 
            placeholder="Password" 
          />
          <button onClick={handleEditUser}>Update User</button>
        </div>
      )}

      {}
      <h3>Users</h3>
      <ul>
        {users.map(user => (
          <li key={user.userId}>
            <span>{user.username}</span>
            <span>{user.password}</span>
            <button onClick={() => { setIsEditing(true); setEditUser(user); }}>Edit</button>
            <button onClick={() => handleDeleteUser(user.userId)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default UserList;
